{"ast":null,"code":"var HTMLDOMPropertyConfig = require('./lib/HTMLDOMPropertyConfig');\nvar SVGDOMPropertyConfig = require('./lib/SVGDOMPropertyConfig');\nvar injection = require('./lib/injection');\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */\nfunction injectDOMPropertyConfig(domPropertyConfig, config, isSVG) {\n  var Properties = domPropertyConfig.Properties;\n  var DOMAttributeNames = domPropertyConfig.DOMAttributeNames;\n  var attributeName;\n  var propertyName;\n  var propConfig;\n  for (propertyName in Properties) {\n    attributeName = DOMAttributeNames[propertyName] || (isSVG ? propertyName : propertyName.toLowerCase());\n    propConfig = Properties[propertyName];\n    config[attributeName] = {\n      attributeName: attributeName,\n      propertyName: propertyName,\n      mustUseProperty: checkMask(propConfig, MUST_USE_PROPERTY),\n      hasBooleanValue: checkMask(propConfig, HAS_BOOLEAN_VALUE),\n      hasNumericValue: checkMask(propConfig, HAS_NUMERIC_VALUE),\n      hasPositiveNumericValue: checkMask(propConfig, HAS_POSITIVE_NUMERIC_VALUE),\n      hasOverloadedBooleanValue: checkMask(propConfig, HAS_OVERLOADED_BOOLEAN_VALUE)\n    };\n  }\n}\n\n/**\n * HTML properties config.\n *\n * @type {Object}\n */\nvar html = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, html);\n\n/**\n * SVG properties config.\n *\n * @type {Object}\n */\nvar svg = {};\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, svg, true);\n\n/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */\nvar properties = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, properties);\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, properties, true);\nvar ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nmodule.exports = {\n  html: html,\n  svg: svg,\n  properties: properties,\n  /**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */\n  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'))\n};","map":{"version":3,"names":["HTMLDOMPropertyConfig","require","SVGDOMPropertyConfig","injection","MUST_USE_PROPERTY","HAS_BOOLEAN_VALUE","HAS_NUMERIC_VALUE","HAS_POSITIVE_NUMERIC_VALUE","HAS_OVERLOADED_BOOLEAN_VALUE","checkMask","value","bitmask","injectDOMPropertyConfig","domPropertyConfig","config","isSVG","Properties","DOMAttributeNames","attributeName","propertyName","propConfig","toLowerCase","mustUseProperty","hasBooleanValue","hasNumericValue","hasPositiveNumericValue","hasOverloadedBooleanValue","html","svg","properties","ATTRIBUTE_NAME_START_CHAR","ATTRIBUTE_NAME_CHAR","module","exports","isCustomAttribute","RegExp","prototype","test","bind"],"sources":["/Users/oluwatobilobaogunbi/Desktop/UOttawa/reactportfolio/node_modules/react-property/index.js"],"sourcesContent":["var HTMLDOMPropertyConfig = require('./lib/HTMLDOMPropertyConfig');\nvar SVGDOMPropertyConfig = require('./lib/SVGDOMPropertyConfig');\nvar injection = require('./lib/injection');\n\nvar MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;\nvar HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;\nvar HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;\nvar HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;\nvar HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L14-L16\n *\n * @param  {Number}  value\n * @param  {Number}  bitmask\n * @return {Boolean}\n */\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\n/**\n * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/DOMProperty.js#L57\n *\n * @param {Object}  domPropertyConfig - HTMLDOMPropertyConfig or SVGDOMPropertyConfig\n * @param {Object}  config            - The object to be mutated\n * @param {Boolean} isSVG             - Whether the injected config is HTML or SVG (it assumes the default is HTML)\n */\nfunction injectDOMPropertyConfig(domPropertyConfig, config, isSVG) {\n  var Properties = domPropertyConfig.Properties;\n  var DOMAttributeNames = domPropertyConfig.DOMAttributeNames;\n  var attributeName;\n  var propertyName;\n  var propConfig;\n\n  for (propertyName in Properties) {\n    attributeName =\n      DOMAttributeNames[propertyName] ||\n      (isSVG ? propertyName : propertyName.toLowerCase());\n    propConfig = Properties[propertyName];\n\n    config[attributeName] = {\n      attributeName: attributeName,\n      propertyName: propertyName,\n      mustUseProperty: checkMask(propConfig, MUST_USE_PROPERTY),\n      hasBooleanValue: checkMask(propConfig, HAS_BOOLEAN_VALUE),\n      hasNumericValue: checkMask(propConfig, HAS_NUMERIC_VALUE),\n      hasPositiveNumericValue: checkMask(\n        propConfig,\n        HAS_POSITIVE_NUMERIC_VALUE\n      ),\n      hasOverloadedBooleanValue: checkMask(\n        propConfig,\n        HAS_OVERLOADED_BOOLEAN_VALUE\n      )\n    };\n  }\n}\n\n/**\n * HTML properties config.\n *\n * @type {Object}\n */\nvar html = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, html);\n\n/**\n * SVG properties config.\n *\n * @type {Object}\n */\nvar svg = {};\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, svg, true);\n\n/**\n * HTML and SVG properties config.\n *\n * @type {Object}\n */\nvar properties = {};\ninjectDOMPropertyConfig(HTMLDOMPropertyConfig, properties);\ninjectDOMPropertyConfig(SVGDOMPropertyConfig, properties, true);\n\nvar ATTRIBUTE_NAME_START_CHAR =\n  ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nvar ATTRIBUTE_NAME_CHAR =\n  ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\n\nmodule.exports = {\n  html: html,\n  svg: svg,\n  properties: properties,\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   *\n   * @see https://github.com/facebook/react/blob/15-stable/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L23-L25\n   *\n   * @param {String}\n   * @return {Boolean}\n   */\n  isCustomAttribute: RegExp.prototype.test.bind(\n    new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')\n  )\n};\n"],"mappings":"AAAA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAClE,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAChE,IAAIE,SAAS,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAE1C,IAAIG,iBAAiB,GAAGD,SAAS,CAACC,iBAAiB;AACnD,IAAIC,iBAAiB,GAAGF,SAAS,CAACE,iBAAiB;AACnD,IAAIC,iBAAiB,GAAGH,SAAS,CAACG,iBAAiB;AACnD,IAAIC,0BAA0B,GAAGJ,SAAS,CAACI,0BAA0B;AACrE,IAAIC,4BAA4B,GAAGL,SAAS,CAACK,4BAA4B;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACjC,OAAO,CAACD,KAAK,GAAGC,OAAO,MAAMA,OAAO;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,uBAAuBA,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,KAAK,EAAE;EACjE,IAAIC,UAAU,GAAGH,iBAAiB,CAACG,UAAU;EAC7C,IAAIC,iBAAiB,GAAGJ,iBAAiB,CAACI,iBAAiB;EAC3D,IAAIC,aAAa;EACjB,IAAIC,YAAY;EAChB,IAAIC,UAAU;EAEd,KAAKD,YAAY,IAAIH,UAAU,EAAE;IAC/BE,aAAa,GACXD,iBAAiB,CAACE,YAAY,CAAC,KAC9BJ,KAAK,GAAGI,YAAY,GAAGA,YAAY,CAACE,WAAW,CAAC,CAAC,CAAC;IACrDD,UAAU,GAAGJ,UAAU,CAACG,YAAY,CAAC;IAErCL,MAAM,CAACI,aAAa,CAAC,GAAG;MACtBA,aAAa,EAAEA,aAAa;MAC5BC,YAAY,EAAEA,YAAY;MAC1BG,eAAe,EAAEb,SAAS,CAACW,UAAU,EAAEhB,iBAAiB,CAAC;MACzDmB,eAAe,EAAEd,SAAS,CAACW,UAAU,EAAEf,iBAAiB,CAAC;MACzDmB,eAAe,EAAEf,SAAS,CAACW,UAAU,EAAEd,iBAAiB,CAAC;MACzDmB,uBAAuB,EAAEhB,SAAS,CAChCW,UAAU,EACVb,0BACF,CAAC;MACDmB,yBAAyB,EAAEjB,SAAS,CAClCW,UAAU,EACVZ,4BACF;IACF,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAImB,IAAI,GAAG,CAAC,CAAC;AACbf,uBAAuB,CAACZ,qBAAqB,EAAE2B,IAAI,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA,IAAIC,GAAG,GAAG,CAAC,CAAC;AACZhB,uBAAuB,CAACV,oBAAoB,EAAE0B,GAAG,EAAE,IAAI,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,CAAC,CAAC;AACnBjB,uBAAuB,CAACZ,qBAAqB,EAAE6B,UAAU,CAAC;AAC1DjB,uBAAuB,CAACV,oBAAoB,EAAE2B,UAAU,EAAE,IAAI,CAAC;AAE/D,IAAIC,yBAAyB,GAC3B,+KAA+K;AACjL,IAAIC,mBAAmB,GACrBD,yBAAyB,GAAG,8CAA8C;AAE5EE,MAAM,CAACC,OAAO,GAAG;EACfN,IAAI,EAAEA,IAAI;EACVC,GAAG,EAAEA,GAAG;EACRC,UAAU,EAAEA,UAAU;EAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEK,iBAAiB,EAAEC,MAAM,CAACC,SAAS,CAACC,IAAI,CAACC,IAAI,CAC3C,IAAIH,MAAM,CAAC,gBAAgB,GAAGJ,mBAAmB,GAAG,KAAK,CAC3D;AACF,CAAC"},"metadata":{},"sourceType":"script"}